# Docker Compose version
version: '3.8'

# Define all the services (applications) we want to run
services:
  
  # PostgreSQL Database Service
  database:
    image: postgres:15              # Use pre-built PostgreSQL image
    container_name: resume-db       # Give it a friendly name
    restart: unless-stopped         # Restart if it crashes
    environment:                    # Set environment variables
      POSTGRES_DB: resume_screener
      POSTGRES_USER: resumeuser
      POSTGRES_PASSWORD: resumepass123
    ports:
      - "5432:5432"                # Map port 5432 from container to your computer
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Persist database data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql  # Run our SQL script on startup
    networks:
      - resume-network             # Connect to our custom network
    healthcheck:                   # Check if database is ready
      test: ["CMD-SHELL", "pg_isready -U resumeuser -d resume_screener"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Spring Boot Backend Service  
  backend:
    build:                         # Build our own image
      context: ./backend           # Look in backend folder
      dockerfile: Dockerfile       # Use Dockerfile in backend folder
    container_name: resume-backend
    restart: unless-stopped
    ports:
      - "8080:8080"               # Spring Boot runs on port 8080
    environment:
      - SPRING_PROFILES_ACTIVE=docker  # Use docker configuration
      - DB_HOST=database          # Connect to our database service
      - DB_PORT=5432
      - DB_NAME=resume_screener
      - DB_USERNAME=resumeuser
      - DB_PASSWORD=resumepass123
      - OPENAI_API_KEY=your_openai_key_here
    depends_on:                   # Wait for database to be ready
      database:
        condition: service_healthy
    networks:
      - resume-network
    volumes:
      - ./backend/uploads:/app/uploads  # Share upload folder with host

  # React Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: resume-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"               # React dev server runs on port 3000
    environment:
      - REACT_APP_API_URL=http://localhost:8080/api  # Backend API URL
      - CHOKIDAR_USEPOLLING=true  # Enable file watching in Docker
    depends_on:
      - backend                   # Wait for backend to start
    networks:
      - resume-network
    volumes:
      - ./frontend:/app           # Share source code for live reloading
      - /app/node_modules         # Don't share node_modules (performance)

# Define custom network so services can talk to each other
networks:
  resume-network:
    driver: bridge

# Define persistent volumes for data storage
volumes:
  postgres_data:                  # Database data will survive container restarts 
